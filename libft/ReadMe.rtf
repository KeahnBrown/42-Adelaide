{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww14480\viewh20600\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97
\f1\b MEMORY MANIPULATING FUNCTIONS
\f0\b0 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\\\\\
\
	
\f1\b ft_bzero
\f0\b0 \
	arguments: 	void *s (Starting memory address from which to zero out)\
			size_t n (number of bytes from memory address to zero out)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\li512\fi-513\pardirnatural\partightenfactor0
\cf0 	return: 	void *s (returns pointer to address for zeroed out region of memory)\
	\
	This function zeros out a memory region by erasing the given memory area with zero bytes (\\0)\
	The bzero function takes two arguments, the starting address for the memory region and the number of bytes to be zeroed out.\
\
	\
	
\f1\b ft_memset
\f0\b0 \
	arguments: 	void *b (A pointer to the address of the memory to fill)\
			int c (The value to fill the block of memory in with)\
			size_t len (The number of bytes to be set to the value)\
	return:		void *b (returns the pointer to the memory area b)\
	\
	This function copies the character \'91c\'92 to the \'92n\'92 number blocks of a string for which is pointed to by \'91*b\'92.\
	\
\
	
\f1\b ft_calloc\
	
\f0\b0 arguments: 	size_t count (The number of spaces to be allocated to the array in memory)\
			size_t size (The size of bytes for which are being stored in the allocated memory)\
	return: 	void *p (A pointer to the allocated memory)\
\
	This function allocates enough space for \'91count\'92 objects that are of \'91size\'92 bytes of memory each, then returns a pointer to the 	allocated memory.\
	\
	
\f1\b ft_memcmp\

\f0\b0 	arguments:	const void *s1 (the address for the first region of memory to compare)\
			const void *s2 (the address for the second region of memory to compare)\
			size_t	n (the length of memory for which to compare the two memory regions)\
	return: 	int difference (returns the first difference occurred between the two memory regions, if there is no difference it just 			returns 0)\
\
	This function compares two different regions of memory together and finds the first difference between the two difference 	objects. If there is no difference the return value is 0;\
\
	
\f1\b ft_memchr\
	
\f0\b0 arguments:	const void *s (The string to be searched)\
			int c (The character to search for in the string)\
			size_t n (The length for how many objects of the array to search for the character)\
	return: 	void * (returns a pointer to the address in the string \'91*s\'92 for which the first occurrence of character c occurs)\
\
	This function takes a pointer to the address of a string and searches through \'92n\'92 number of memory blocks for an object that 	matches the desired object. If the object is not within the string or does not occur within the length for which to search the memory 	address, it returns NULL\
\
\
	
\f1\b ft_memcpy\

\f0\b0 	arguments:	void *restrict dst (Pointer to the destination allocated memory)\
			const void *restrict src (Pointer to the source allocated memory)\
			size_t n (The size for how many objects to copy)\
	return:		void *dst (returns a pointer to the copied array of objects)\
\
	This function copies the first \'92n\'92 number of objects from the source string src\'92 pointer and pastes them to the destination address 	\'92dst\'92 pointer, it then returns the pointer to the destination address. If both the destination and source arrays are empty, the return 	value is NULL.\
\
\
	
\f1\b ft_memmove\
	
\f0\b0 arguments: 	void *dst (A pointer to the destination to copy the source code to)\
			const void *src (A pointer to the source code to copy and leave the same)\
			size_t len (The number of bytes to copy from source to destination)\
	return:		*dst (returns a pointer to the destination string)\
	\
	This function copies the first \'92n\'92 bytes within the source array and pastes them to the destination array in a non-destructive way.\
	Function returns NULL if the two strings are not capable, otherwise it returns a pointer to the destination array.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \\\\\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97//}